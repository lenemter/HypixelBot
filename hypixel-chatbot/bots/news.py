from common import (
    COMMAND_PREFIX,
    ERROR_COLOR,
    ERROR_MESSAGE,
    LOADING_EMBED,
    SUCCESS_COLOR,
    get_current_month_and_year,
    num_to_month,
)
from database.__all_models import NewsRequest, NewsStats
from database.db_session import create_session
from discord import Embed
from discord.ext import commands
from discord.ext.commands.context import Context
from news_utils import get_news

session = create_session()


def get_news_stats(user_id: int, month, year) -> NewsStats:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –ë–î –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ç–æ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –ë–î —Å–æ–∑–¥–∞—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
    news_stats = (
        session.query(NewsStats)
        .filter(
            (NewsStats.user_id == user_id)
            & (NewsStats.month == month)
            & (NewsStats.year == year)
        )
        .first()
    )

    if news_stats is None:
        news_stats = NewsStats(user_id=user_id, month=month, year=year)
        session.add(news_stats)
        session.commit()

    return news_stats


def count_request(user_id: int, count: int) -> None:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    news_request = NewsRequest(user_id=user_id, count=count)
    session.add(news_request)

    month, year = get_current_month_and_year()
    user_news_all = get_news_stats(
        user_id=user_id,
        month=None,
        year=None,
    )
    user_news_month = get_news_stats(
        user_id=user_id,
        month=month,
        year=year,
    )
    all_news_all = get_news_stats(
        user_id=-1,
        month=None,
        year=None,
    )
    all_news_month = get_news_stats(
        user_id=-1,
        month=month,
        year=year,
    )

    user_news_all.count += 1
    user_news_month.count += 1
    all_news_all.count += 1
    all_news_month.count += 1

    session.commit()


def is_num(string: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ"""
    try:
        int(string)
        return True
    except Exception:
        return False


def generate_stats_description(news_stats) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"""
    count = news_stats.count
    count_str = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}"

    return count_str


class NewsBot(commands.Cog):
    def __init__(self, bot, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.bot = bot

    @commands.command(name="news")
    async def news(self, ctx: Context, count: str = "3", confirmation: bool = False):
        """!news <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>"""
        if count == "stats":
            await self.stats(ctx)
        elif is_num(count):
            message = await ctx.send(embed=LOADING_EMBED)

            count = int(count)
            if count <= 0:
                embed = Embed(
                    title=ERROR_MESSAGE,
                    description="–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–∫ –º–∞–ª–æ –Ω–æ–≤–æ—Å—Ç–µ–π",
                    color=ERROR_COLOR,
                )
                await message.edit(embed=embed)
                return

            if count >= 20 and not confirmation:
                embed = Embed(
                    title=ERROR_MESSAGE,
                    description=(
                        f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π, –±–æ—Ç –±—É–¥–µ—Ç —Å–ø–∞–º–∏—Ç—å\n"
                        f"–í–≤–µ–¥–∏—Ç–µ `{COMMAND_PREFIX}news {count} True` —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"
                    ),
                    color=ERROR_COLOR,
                )
                await message.edit(embed=embed)
                return

            news = get_news(count)
            embed = Embed(
                title="üóû "
                + ("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã" if len(news) >= 2 else "–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç"),
                color=SUCCESS_COLOR,
            )
            embed.set_footer(text=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî {COMMAND_PREFIX}news stats")
            await message.edit(embed=embed)

            for link in news:
                await ctx.send(link)

            user_id = ctx.author.id
            count_request(user_id, count)
        else:
            embed = Embed(
                title=ERROR_MESSAGE,
                description="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä",
                color=ERROR_COLOR,
            )
            await message.edit(embed=embed)

    async def stats(self, ctx: Context):
        """!news stats"""
        message = await ctx.send(embed=LOADING_EMBED)

        user_id = ctx.author.id
        month, year = get_current_month_and_year()
        month_name = num_to_month(month)

        user_news_all = get_news_stats(user_id=user_id, month=None, year=None)
        user_news_month = get_news_stats(user_id=user_id, month=month, year=year)
        all_news_all = get_news_stats(user_id=-1, month=None, year=None)
        all_news_month = get_news_stats(user_id=-1, month=month, year=year)

        embed = Embed(
            title="üóû –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º",
            color=SUCCESS_COLOR,
        )

        # User
        embed.add_field(
            name=f"–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–æ–≤–æ—Å–µ–π –∑–∞ {month_name}",
            value=generate_stats_description(user_news_month),
            inline=False,
        )
        embed.add_field(
            name="–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è",
            value=generate_stats_description(user_news_all),
            inline=False,
        )

        # All
        embed.add_field(
            name=f"–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {month_name}",
            value=generate_stats_description(all_news_month),
            inline=False,
        )
        embed.add_field(
            name="–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è",
            value=generate_stats_description(all_news_all),
            inline=False,
        )
        await message.edit(embed=embed)
